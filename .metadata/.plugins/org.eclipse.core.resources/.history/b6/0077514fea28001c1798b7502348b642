package empSLLmenuderivven;

import Practice.Node;

public class EmpList {
	Node head;
	
	public EmpList() {
		head =null;
	}
	
	public void insertEmp(Employee e) {
		Node temp = new Node();
		temp.setData(e);
		//if list is empty
		if(head==null) {
			head =temp;
		}
		else {
			temp.setNext(head);
			head =temp;
		}
	}
	
	public String toString() {
		Node it;
		it=head;
		String str="";
		while(it!=null) {
			str+=it+"-->\n";
			it=it.getNext();
		}
		return str;
	}

	public void append(Employee e) {
		Node temp =new Node();
		temp.setData(e);
		//if list is empty
		if(head==null) {
			head =temp;
		}
		
		else {
			Node it=head;
			while(it !=null) {
				it =it.getNext();
			}
		}
		
		
	}

	//--------DELETE_AT_FIRST_POSITION----------
	public void deletFirst(){
			Node temp =head;
			if(head ==null) {
				System.out.println("List is empty");
			}
			else {
				//temp =head.getNext();
				head = temp.getNext();
			}
		}

		
	//--------DELETE_AT_LAST_POSITION----------
	public void deletLast() {
			if(head == null) {
				System.out.println("List is empty");
			}
			else {
				Node it =head;
				while(it.getNext().getNext() != null) {
					it =it.getNext();
				}
				Node temp =it;
				it.setNext(null);

			}
		}
		
	public void insertAtPos(Employee e, int pos) {
			Node temp = new Node();
			temp.setData(e);
			int n =numOfNode();
			if(pos == 1) {
				insertEmp(e);
			}
			else if(pos == n+1) {
				append(e);
			}
			else if(pos>1 && pos<n) {
				Node it =head;
				for(int i= 1;i<pos-1;i++) {
					it=it.getNext();
				}
				temp.setNext(it.getNext());
				it.setNext(temp);
				//System.out.println(it);
			}
		}
	
	//--------DELET_AT_GIVEN_POSITION----------
		public void delAtPos(int pos) {
			int n =numOfNode();
			Node it =head;

			if(pos == 1) {
				deletFirst();
			}
			else if(pos == n+1) {
				deletLast();
			}
			else if(pos>1 && pos <n) {
				for(int i =1;i<pos-1;i++) {
					it =it.getNext();
				}
				Node temp =it.getNext().getNext();
				it.setNext(temp);
				//temp.setNext(null);

				//it = it.getNext();
				//			temp.setNext(null);
				//System.out.println(temp);
			}
			else {

				System.out.println("Invalid position to delete");

			}

		}
		private int numOfNode() {
			int num=0;
			Node it=head;

			while(it.getNext() != null){
				it =it.getNext();
				num++;
			}
			return num;
		}
		//<----------------END---------------->

}
